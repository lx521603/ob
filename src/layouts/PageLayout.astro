---
import path from "node:path";
import { Image } from "astro:assets";
import { devConfig, isDev } from "@/config/dev";

interface Props {
  id?: string;
  src: string;
  class?: string;
  alt?: string;
  caption?: string;
  position?: string;
  basePath?: string;
  width?: number;
  height?: number;
  format?: "webp" | "avif" | "png" | "jpg" | "jpeg" | "svg";
  quality?: number;
  loading?: "lazy" | "eager";
  decoding?: "async" | "sync" | "auto";
  fetchpriority?: "high" | "low" | "auto";
  densities?: number[];
  aspectRatio?: "auto" | "16:9" | "9:16" | "4:3" | "3:4" | "1:1"; // 新增比例选项
  maxWidth?: number; // 新增最大宽度限制
}

const { 
  id, 
  src, 
  alt = "", 
  caption,
  position = "center", 
  basePath = "/",
  width,
  height,
  format = "webp",
  quality = 85,
  loading = "lazy",
  decoding = "async",
  fetchpriority = "auto",
  densities = [1, 2],
  aspectRatio = "auto", // 默认自动检测比例
  maxWidth = 1200 // 默认最大宽度
} = Astro.props;

const className = Astro.props.class;

// Clean the src path first - remove Obsidian brackets if present
let cleanSrc = src;
if (!cleanSrc) {
  console.warn('ImageWrapper: src is undefined');
  cleanSrc = '';
}
if (cleanSrc.startsWith('[[') && cleanSrc.endsWith(']]')) {
  cleanSrc = cleanSrc.slice(2, -2);
}

// Determine image type using cleaned src
// For folder-based content, if basePath indicates a synced folder, treat as local for optimization
const isSyncedFolder = basePath && basePath.includes('/') && !basePath.endsWith('/attachments/');
const isLocal = !(
  cleanSrc.startsWith("/") ||
  cleanSrc.startsWith("http") ||
  cleanSrc.startsWith("https") ||
  cleanSrc.startsWith("data:")
) || isSyncedFolder; // Treat synced folders as local for Astro Image optimization
const isPublic = cleanSrc.startsWith("/") && !isSyncedFolder;

// Dynamic import for local images
let img: any = null;
let fallbackSrc: string | null = null;
let isImageMissing = false;
let originalWidth: number | undefined = width;
let originalHeight: number | undefined = height;

if (isLocal) {
  try {
    const files = import.meta.glob<ImageMetadata>("/public/**", {
      import: "default",
    });
    
    // Remove leading "./" if present for folder-based posts
    if (cleanSrc.startsWith('./')) {
      cleanSrc = cleanSrc.slice(2);
    }
    
    // Remove leading "images/" if present since basePath already includes it
    // But only for global images, not folder-based images
    if (cleanSrc.startsWith('images/') && (basePath === '/posts/attachments/' || basePath === '/projects/attachments/' || basePath === '/docs/attachments/')) {
      cleanSrc = cleanSrc.slice(7);
    }
    
    // For folder-based content, if basePath already includes 'images/' and cleanSrc starts with 'images/',
    // remove the prefix from cleanSrc to avoid double 'images/'
    if (cleanSrc.startsWith('images/') && basePath.includes('/attachments/') && basePath !== '/posts/attachments/' && basePath !== '/projects/attachments/' && basePath !== '/docs/attachments/')) {
      cleanSrc = cleanSrc.slice(7);
    }
    
    // For content with attachments/ prefix, remove it since the sync script already handles this
    if (cleanSrc.startsWith('attachments/') && basePath.includes('/projects/') && !basePath.includes('/attachments/')) {
      cleanSrc = cleanSrc.slice(12); // Remove 'attachments/' prefix
    }
    
    // For single-file projects, also remove attachments/ prefix when using global attachments directory
    if (cleanSrc.startsWith('attachments/') && basePath === '/projects/attachments/') {
      cleanSrc = cleanSrc.slice(12); // Remove 'attachments/' prefix
    }
    
    // Normalize the path for the glob pattern
    let normalizedPath = path
      .normalize(path.join("/public", basePath, cleanSrc))
      .replace(/\\/g, "/");
    
    // Ensure the path starts with /public
    if (!normalizedPath.startsWith("/public")) {
      normalizedPath = `/public${normalizedPath}`;
    }
    
    // Debug logging
    if (isDev && devConfig.images.logMissingImages) {
      // Debug logging removed for production
    }
    
    const file = files[normalizedPath];
    if (file) {
      img = await file();
      // 获取图片原始尺寸用于比例计算
      if (!originalWidth) originalWidth = img.width;
      if (!originalHeight) originalHeight = img.height;
    } else {
      isImageMissing = true;
      // No fallback images - just mark as missing
    }
  } catch (error) {
    isImageMissing = true;
    // No fallback images - just mark as missing
  }
}

// 计算最终宽高和样式
let finalWidth = originalWidth;
let finalHeight = originalHeight;
let containerClass = "overflow-hidden relative";
let imageClass = "w-full h-auto";

// 根据选择的宽高比设置容器样式
if (aspectRatio !== "auto") {
  imageClass = "w-full h-full object-cover";
  
  switch (aspectRatio) {
    case "16:9":
      containerClass += " aspect-video"; // Tailwind 的 16:9
      break;
    case "9:16":
      containerClass += " aspect-[9/16]";
      break;
    case "4:3":
      containerClass += " aspect-[4/3]";
      break;
    case "3:4":
      containerClass += " aspect-[3/4]";
      break;
    case "1:1":
      containerClass += " aspect-square";
      break;
  }
} else {
  // 自动模式：统一使用 contain 保持图片完整
  imageClass = "w-full h-auto object-contain max-w-full";
}

// 如果有最大宽度限制，添加对应样式
if (maxWidth) {
  containerClass += ` max-w-[${maxWidth}px] mx-auto`;
}

const imageStyle = `object-position: ${position}`;
---

<div id={id} class:list={[className, containerClass]}>
  {isLocal && img ? (
    <Image 
      src={img} 
      alt={alt} 
      width={finalWidth}
      height={finalHeight}
      format={format}
      quality={quality}
      class={imageClass} 
      style={imageStyle}
      loading={loading}
      decoding={decoding}
      fetchpriority={fetchpriority}
      densities={densities}
    />
  ) : isPublic ? (
    <img 
      src={isSyncedFolder ? `${basePath}${cleanSrc}` : cleanSrc} 
      alt={alt} 
      class={imageClass} 
      style={imageStyle}
      loading={loading}
      decoding={decoding}
      fetchpriority={fetchpriority}
      width={finalWidth}
      height={finalHeight}
    />
  ) : isImageMissing ? (
    // Don't render anything for missing local images
    null
  ) : (
    <img 
      src={cleanSrc} 
      alt={alt} 
      class={imageClass} 
      style={imageStyle}
      loading={loading}
      decoding={decoding}
      fetchpriority={fetchpriority}
      width={finalWidth}
      height={finalHeight}
    />
  )}
  
  {caption && (
    <figcaption class="mt-2 text-sm text-primary-600 dark:text-primary-400 text-center italic">
      {caption}
    </figcaption>
  )}
</div>

<style>
/* 确保自定义宽高比样式生效 */
.aspect-\[9\/16\] {
  aspect-ratio: 9/16;
}
.aspect-\[4\/3\] {
  aspect-ratio: 4/3;
}
.aspect-\[3\/4\] {
  aspect-ratio: 3/4;
}
</style>