---
import type { Project, Heading } from '@/types';
import { siteConfig } from '@/config';
import { generateProjectSEO } from '@/utils/seo';
import { optimizePostImagePath, optimizeContentImagePath } from '@/utils/images';
import { processWikilinksInHTML } from '@/utils/internallinks';
import { getCollection } from 'astro:content';
import { shouldShowPost, processPost, generateTOC, getAdjacentPosts, formatDate, formatDateMobile, isValidDate } from '@/utils/markdown';
import { hasProjectCategories } from '@/utils/categories';
import { normalizeStatus, getStatusDisplayText, hasStatusStyling, getStatusClasses } from '@/utils/status';
import BaseLayout from '@/layouts/BaseLayout.astro';
import TableOfContents from '@/components/TableOfContents.astro';
import LinkedMentions from '@/components/LinkedMentions.astro';
import GiscusComments from '@/components/GiscusComments.astro';
import Icon from '@/components/Icon.astro';

export interface Props {
  project: Project;
}

const { project } = Astro.props;

// Normalize status for consistent handling
const status = normalizeStatus(project.data.status);

// Smart repository icon detection
const getRepositoryIcon = (repositoryUrl: string) => {
  if (!repositoryUrl) return 'folder-git-2';
  const url = repositoryUrl.toLowerCase();
  if (url.includes('github.com') || url.includes('github.io')) return 'github';
  if (url.includes('gitlab.com')) return 'gitlab';
  return 'folder-git-2';
};

// Check if we're in development mode
const isDev = import.meta.env.DEV;

// Generate SEO data
const seoData = generateProjectSEO(project, Astro.site ? Astro.site.toString() : '');

// Generate structured data for the project
const structuredData = {
  "@context": "https://schema.schema.org",
  "@type": "CreativeWork",
  "name": project.data.title,
  "description": project.data.description,
  "author": { "@type": "Person", "name": siteConfig.author },
  "publisher": {
    "@type": "Organization",
    "name": siteConfig.title,
    "logo": { "@type": "ImageObject", "url": siteConfig.site + "/favicon.ico" }
  },
  "dateCreated": project.data.date.toISOString(),
  "dateModified": project.data.date.toISOString(),
  "mainEntityOfPage": { "@type": "WebPage", "@id": Astro.url.href },
  "url": project.data.projectUrl || Astro.url.href,
  "codeRepository": project.data.repositoryUrl
};

// Get all posts for wikilink resolution
const allPosts = await getCollection('posts');
const visiblePosts = allPosts.filter(p => shouldShowPost(p as any, isDev));

// Get all projects to check if any have categories
const allProjectsForCategories = await getCollection('projects');
const visibleProjectsForCategories = allProjectsForCategories.filter(p => shouldShowPost(p as any, isDev));
const projectsHaveCategories = hasProjectCategories(allProjectsForCategories);

// Process the project content
const { Content, headings } = await processPost(project as any);

// Generate table of contents if enabled
const hideTOC = project.data.hideTOC === true;
const shouldShowTOC = siteConfig.tableOfContents.enabled && !hideTOC && headings.length > 0;
const toc = shouldShowTOC ? await generateTOC(headings) : [];

// Get adjacent projects for navigation
const { prev: prevProject, next: nextProject } = getAdjacentPosts(visibleProjectsForCategories as any, project.slug);
---

<BaseLayout seoData={seoData}>
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    {project.data.image && project.data.hideCoverImage !== true && (
      <link
        rel="preload"
        as="image"
        href={project.data.image.startsWith('http')
          ? project.data.image
          : optimizeContentImagePath(project.data.image, 'projects', project.slug, project.id)}
        fetchpriority="high"
      />
    )}
  </Fragment>

  <div class="py-8 relative">
    <div class="mx-auto px-4 sm:px-6 lg:px-8 relative" style={`max-width: ${siteConfig.layout.contentWidth}`}>
      <article class={`bg-primary-50 dark:bg-primary-900 rounded-lg border border-primary-200 dark:border-primary-700 shadow-sm ${project.data.image && project.data.hideCoverImage !== true ? 'overflow-hidden' : ''}`}>
        
        <!-- Cover image -->
        {project.data.image && project.data.hideCoverImage !== true && (
          <div class="overflow-hidden rounded-t-lg bg-primary-100 dark:bg-primary-800">
            <img
              src={project.data.image.startsWith('http')
                ? project.data.image
                : optimizeContentImagePath(project.data.image, 'projects', project.slug, project.id)}
              alt={project.data.imageAlt || `Featured image for project: ${project.data.title}`}
              class="w-full h-full object-cover"
              loading="eager"
              fetchpriority="high"
            />
          </div>
        )}

        <div class={`p-6 ${project.data.image && project.data.hideCoverImage !== true ? 'rounded-b-lg' : 'rounded-lg'}`}>
          <header class="mb-4 relative">
            <h1 class="text-xl font-bold text-primary-900 dark:text-primary-50 mb-6 leading-tight pr-20">
              {project.data.title}
            </h1>

            <div class="absolute top-0 right-0 flex gap-2">
              {project.data.repositoryUrl && (
                <a href={project.data.repositoryUrl} target="_blank" rel="noopener noreferrer"
                   class="inline-flex items-center justify-center px-2 py-2 text-sm text-primary-600 dark:text-primary-300 bg-primary-50 dark:bg-primary-800 rounded-lg border border-primary-200 dark:border-primary-700 hover:bg-highlight-100 dark:hover:bg-highlight-800 hover:text-highlight-700 dark:hover:text-highlight-300 transition-all duration-200 hover:shadow-md"
                   title="查看仓库">
                  <Icon name={getRepositoryIcon(project.data.repositoryUrl)} class="w-4 h-4" />
                </a>
              )}
              {project.data.projectUrl && (
                <a href={project.data.projectUrl} target="_blank" rel="noopener noreferrer"
                   class="inline-flex items-center gap-1.5 px-3 py-2 text-sm bg-highlight-600 dark:bg-highlight-400 text-white border-highlight-600 dark:border-highlight-400 rounded-lg hover:opacity-90 transition-all duration-200"
                   style="color: white !important;" title="查看项目">
                  <span class="hidden sm:inline">查看</span>
                  <span class="sm:hidden">查看</span>
                  <Icon name="external-link" class="w-4 h-4" />
                </a>
              )}
            </div>

            <div class="flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-primary-600 dark:text-primary-300 mb-6">
              {isValidDate(project.data.date) && (
                <time datetime={project.data.date.toISOString()} class="font-medium">
                  <span class="hidden sm:inline">{formatDate(project.data.date)}</span>
                  <span class="sm:hidden">{formatDateMobile(project.data.date)}</span>
                </time>
              )}

              {status && hasStatusStyling(status) && (
                <>
                  <span class="text-primary-300 dark:text-primary-600 hidden sm:inline">•</span>
                  <span class="text-primary-300 dark:text-primary-600 sm:hidden">•</span>
                </>
              )}

              {status && (
                <span class={`px-2 py-1 rounded-full text-xs font-medium ${getStatusClasses(status)}`}>
                  {getStatusDisplayText(status)}
                </span>
              )}
            </div>

            {projectsHaveCategories && project.data.categories && project.data.categories.length > 0 && (
              <div class="flex flex-wrap gap-2 mb-8">
                {project.data.categories.map(category => (
                  <span class="text-xs text-primary-600 dark:text-primary-300 bg-primary-100 dark:bg-primary-800 px-2.5 py-1 rounded-full border border-primary-200 dark:border-primary-700">
                    {category}
                  </span>
                ))}
              </div>
            )}
          </header>

          <div class="prose dark:prose-dark max-w-none" id="project-content">
            <Content />
          </div>

          {siteConfig.postOptions.linkedMentions.enabled && <LinkedMentions currentSlug={project.slug} />}

          {siteConfig.postOptions.postNavigation && (prevProject || nextProject) && (
            <nav class="mt-8 pt-8 border-t border-primary-200 dark:border-primary-700">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                {prevProject && (
                  <div class="text-left">
                    <a href={`/projects/${prevProject.slug}`} class="group block p-4 rounded-lg border border-primary-200 dark:border-primary-700 hover:border-highlight-300 dark:hover:border-highlight-600 transition-all duration-200 hover:shadow-md">
                      <h3 class="font-semibold text-primary-900 dark:text-primary-50 group-hover:text-highlight-600 dark:group-hover:text-highlight-400 transition-colors">
                        {prevProject.data.title}
                      </h3>
                      <div class="flex justify-start mt-2">
                        <Icon name="arrow-left" class="w-5 h-5 text-primary-500 dark:text-primary-400 group-hover:text-highlight-500 dark:group-hover:text-highlight-400 transition-colors" />
                      </div>
                    </a>
                  </div>
                )}
                {nextProject && (
                  <div class={`text-right ${!prevProject ? 'md:col-start-2' : ''}`}>
                    <a href={`/projects/${nextProject.slug}`} class="group block p-4 rounded-lg border border-primary-200 dark:border-primary-700 hover:border-highlight-300 dark:hover:border-highlight-600 transition-all duration-200 hover:shadow-md">
                      <h3 class="font-semibold text-primary-900 dark:text-primary-50 group-hover:text-highlight-600 dark:group-hover:text-highlight-400 transition-colors">
                        {nextProject.data.title}
                      </h3>
                      <div class="flex justify-end mt-2">
                        <Icon name="arrow-right" class="w-5 h-5 text-primary-500 dark:text-primary-400 group-hover:text-highlight-500 dark:group-hover:text-highlight-400 transition-colors" />
                      </div>
                    </a>
                  </div>
                )}
              </div>
            </nav>
          )}

          {siteConfig.postOptions.comments.enabled && (
            <div class="mt-16">
              <GiscusComments postTitle={project.data.title} postSlug={project.slug} postUrl={Astro.url.href} />
            </div>
          )}
        </div>
      </article>

      {shouldShowTOC && (
        <div class="hidden xl:block absolute top-8 left-full ml-1 w-64">
          <div class="sticky top-24" id="toc">
            <TableOfContents headings={toc} />
          </div>
        </div>
      )}
    </div>
  </div>

  <Fragment slot="scripts">
    <script define:vars={{ posts: visiblePosts }}>
      document.addEventListener('DOMContentLoaded', function() {
        const projectContent = document.getElementById('project-content');
        if (projectContent) {
          const firstH1 = projectContent.querySelector('h1');
          if (firstH1) firstH1.remove();
        }
      });

      document.addEventListener('DOMContentLoaded', () => {
        function initializeImageGrids() {
          const supportsHas = CSS.supports('selector(:has(img))');
          if (supportsHas) return;
          const paragraphs = document.querySelectorAll('.prose p');
          paragraphs.forEach(p => {
            const images = p.querySelectorAll('img, picture');
            const textNodes = Array.from(p.childNodes).filter(node => node.nodeType === Node.TEXT_NODE && node.textContent.trim() !== '');
            const otherElements = Array.from(p.childNodes).filter(node => node.nodeType === Node.ELEMENT_NODE && !['IMG', 'PICTURE', 'BR'].includes(node.tagName));
            if (images.length >= 2 && textNodes.length === 0 && otherElements.length === 0) {
              p.classList.remove('image-grid', 'image-grid-2', 'image-grid-3', 'image-grid-4', 'image-grid-5', 'image-grid-6');
              p.classList.add('image-grid', `image-grid-${Math.min(images.length, 6)}`);
            }
          });
        }
        initializeImageGrids();

        const allLinks = document.querySelectorAll('.prose a[href]');
        allLinks.forEach(link => {
          const href = link.getAttribute('href');
          if (href && (href.startsWith('http://') || href.startsWith('https://'))) {
            if (!link.hasAttribute('target')) {
              link.setAttribute('target', '_blank');
              link.setAttribute('rel', 'noopener noreferrer');
            }
          }
        });
      });
    </script>
  </Fragment>
</BaseLayout>