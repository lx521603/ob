---
import type { Docs } from '@/types';
import { siteConfig } from '@/config';
import { generateDocumentationSEO } from '@/utils/seo';
import { optimizeContentImagePath } from '@/utils/images';
import { hasDocCategories } from '@/utils/categories';
import { getCollection } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import TableOfContents from '@/components/TableOfContents.astro';
import Lightbox from '@/components/Lightbox.astro';
import ImageWrapper from '@/components/ImageWrapper.astro';

export interface Props {
  documentation: Docs;
}

const { documentation } = Astro.props;
const allDocs = await getCollection('docs');
const docsHaveCategories = hasDocCategories(allDocs);
const { Content, headings } = await documentation.render();
const seoData = generateDocumentationSEO(documentation, Astro.url.href);

const maxDepth = siteConfig.tableOfContents.depth;
const toc = headings.filter(h => h.depth >= 2 && h.depth <= maxDepth);
const hideTOC = documentation.data.hideTOC === true;
const showTOC = documentation.data.showTOC !== undefined ? documentation.data.showTOC : true;
const shouldShowTOC = siteConfig.tableOfContents.enabled && !hideTOC && showTOC && toc.length > 0;

// ✅ 安全解析 image 字段
let coverImage: string | null = null;
if (documentation.data.image) {
  let img = documentation.data.image;
  if (Array.isArray(img)) img = img[0];
  if (typeof img === 'string') {
    if (img.startsWith('[[') && img.endsWith(']]')) {
      img = img.slice(2, -2);
    }
    coverImage = img.trim();
  }
}
---
<BaseLayout seoData={seoData}>
  <Fragment slot="head">
    {coverImage &&
      siteConfig.postOptions.showPostCardCoverImages !== 'none' &&
      documentation.data.hideCoverImage !== true && (
        <link
          rel="preload"
          as="image"
          href={coverImage.startsWith('http')
            ? coverImage
            : optimizeContentImagePath(coverImage, 'documentation', documentation.slug, documentation.id)}
          fetchpriority="high"
        />
      )}
  </Fragment>

  <div class="py-8 relative">
    <div class="mx-auto px-4 sm:px-6 lg:px-8 relative" style={`max-width: ${siteConfig.layout.contentWidth}`}>
      <article
        class={`bg-primary-50 dark:bg-primary-900 rounded-lg border border-primary-200 dark:border-primary-700 shadow-sm ${
          siteConfig.postOptions.showPostCardCoverImages !== 'none' &&
          coverImage &&
          documentation.data.hideCoverImage !== true
            ? 'overflow-hidden'
            : ''
        }`}
      >
        {siteConfig.postOptions.showPostCardCoverImages !== 'none' &&
          coverImage &&
          documentation.data.hideCoverImage !== true && (
            <div class="overflow-hidden rounded-t-lg bg-primary-100 dark:bg-primary-800">
              <ImageWrapper
                src={coverImage}
                alt={documentation.data.imageAlt || `Featured image for documentation: ${documentation.data.title}`}
                basePath={coverImage.startsWith('http') ? '' : '/docs/attachments/'}
                width={800}
                format="webp"
                quality={85}
                loading="eager"
                decoding="async"
                fetchpriority="high"
              />
            </div>
          )}

        <div
          class={`p-6 ${
            siteConfig.postOptions.showPostCardCoverImages !== 'none' &&
            coverImage &&
            documentation.data.hideCoverImage !== true
              ? 'rounded-b-lg'
              : 'rounded-lg'
          }`}
        >
          <header class="mb-4">
            <h1 class="text-xl font-bold text-primary-900 dark:text-primary-50 mb-6 leading-tight">
              {documentation.data.title}
            </h1>

            <div class="flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-primary-600 dark:text-primary-300 mb-6">
              {docsHaveCategories && documentation.data.category && (
                <span class="px-2 py-1 bg-primary-100 dark:bg-primary-800 text-primary-700 dark:text-primary-300 rounded-full text-xs font-medium">
                  {documentation.data.category}
                </span>
              )}

              {documentation.data.version && (
                <>
                  {docsHaveCategories && (
                    <span class="text-primary-300 dark:text-primary-600">•</span>
                  )}
                  <span class="text-xs">Version {documentation.data.version}</span>
                </>
              )}

              {documentation.data.lastModified && (
                <>
                  {(docsHaveCategories || documentation.data.version) && (
                    <span class="text-primary-300 dark:text-primary-600">•</span>
                  )}
                  <time datetime={documentation.data.lastModified.toISOString()} class="text-xs">
                    Updated{' '}
                    {documentation.data.lastModified.toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric',
                    })}
                  </time>
                </>
              )}
            </div>
          </header>

          <div class="prose dark:prose-dark max-w-none" id="documentation-content">
            <Content />
          </div>
        </div>
      </article>

      {shouldShowTOC && (
        <div class="hidden xl:block absolute top-0 left-full ml-1 w-64">
          <div class="sticky top-24" id="toc">
            <TableOfContents headings={toc} />
          </div>
        </div>
      )}
    </div>
  </div>

  <Fragment slot="scripts">
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // 删除重复 h1
        const content = document.getElementById('documentation-content');
        if (content) {
          const firstH1 = content.querySelector('h1');
          if (firstH1) firstH1.remove();
        }

        // 图片点击放大
        document.querySelectorAll('img').forEach((img, index) => {
          if (!img.closest('a')) {
            img.style.cursor = 'pointer';
            img.addEventListener('click', () => {
              window.dispatchEvent(new CustomEvent('openLightbox', { detail: { index } }));
            });
          }
        });
      });
    </script>
  </Fragment>
</BaseLayout>