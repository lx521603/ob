---
import type { CollectionEntry } from 'astro:content';
import { formatDate, processMarkdown, isValidDate } from '../utils/markdown';
import { siteConfig } from '../config';
import ImageWrapper from './ImageWrapper.astro';
import Icon from './Icon.astro';

interface Props {
  documentation: CollectionEntry<'docs'>;
  featured?: boolean;
  eager?: boolean;
  context?: 'featured' | 'recent' | 'docs' | 'tags' | 'home';
}

const { documentation, featured = false, eager = false, context = 'docs' } = Astro.props;

// Get excerpt from markdown
const { excerpt } = processMarkdown(documentation.body);

const title = documentation.data.title;
const description = documentation.data.description || excerpt;
const lastModified = documentation.data.lastModified;
const image = documentation.data.image;
const imageAlt = documentation.data.imageAlt || `Cover image for ${title}`;
const category = documentation.data.category;
const version = documentation.data.version;

// 🧠 安全处理图片路径
const processedImage = (() => {
  if (!image) return '';

  let value = Array.isArray(image) ? image[0] : image;

  if (typeof value !== 'string') {
    console.warn('Invalid image format in docs:', value);
    return '';
  }

  // Handle Obsidian-style [[image.png]]
  if (value.startsWith('[[') && value.endsWith(']]')) {
    value = value.slice(2, -2);
  }

  // Folder-based doc
  const isFolderBased = documentation.id.includes('/') && documentation.id.endsWith('/index.md');
  if (isFolderBased) {
    if (value.startsWith('images/') || value.startsWith('attachments/')) {
      return value.replace(/^(images|attachments)\//, '');
    }
    return value;
  }

  // Regular doc with attachments
  if (value.startsWith('attachments/')) {
    return value.replace('attachments/', '');
  }

  return value;
})();

// 仅当存在图片时显示
const showCoverImage = processedImage && context !== 'home';
---

<div class="group relative bg-white dark:bg-primary-800 rounded-lg border border-primary-200 dark:border-primary-700 hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
  <a href={`/docs/${documentation.slug}`} class="block" aria-label={`View documentation: ${title}`}>

    {showCoverImage && (
      <div class="overflow-hidden rounded-t-lg bg-primary-100 dark:bg-primary-800">
        <ImageWrapper
          src={processedImage}
          basePath={(() => {
            // 外链图片
            if (typeof processedImage === 'string' && processedImage.startsWith('http')) {
              return '';
            }

            const isFolderBased = documentation.id.includes('/') && documentation.id.endsWith('/index.md');
            if (isFolderBased) {
              return `/docs/${documentation.slug}/`;
            }

            return "/docs/attachments/";
          })()}
          alt={imageAlt}
          width={800}
          height={undefined}
          aspectRatio="auto"
          format="webp"
          quality={85}
          loading={eager ? 'eager' : 'lazy'}
          fetchpriority={eager ? 'high' : 'auto'}
          class="w-full h-full group-hover:scale-102 dark:group-hover:brightness-100 transition-all duration-300"
        />
      </div>
    )}

    <div class={`flex items-center justify-between p-4 ${showCoverImage ? 'pb-2' : 'pb-2'}`}>
      <Icon name="book-text" class="w-4 h-4 text-primary-500 dark:text-primary-400" />
      {version && (
        <span class="text-xs text-primary-500 dark:text-primary-400 font-mono bg-primary-100 dark:bg-primary-700 px-2 py-1 rounded">
          v{version}
        </span>
      )}
    </div>

    <div class={`p-4 pt-2 ${showCoverImage ? 'rounded-b-lg' : 'rounded-lg'}`}>
      <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-50 mb-2 group-hover:text-highlight-600 dark:group-hover:text-highlight-400 transition-colors line-clamp-2">
        {title}
      </h3>

      {description && (
        <p class="text-sm text-primary-600 dark:text-primary-300 mb-3 line-clamp-3">
          {description}
        </p>
      )}

      {lastModified && (
        <div class="pt-2 border-t border-primary-200 dark:border-primary-700">
          {isValidDate(lastModified) && (
            <time datetime={lastModified.toISOString()} class="text-xs text-primary-500 dark:text-primary-400">
              Updated {lastModified.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
            </time>
          )}
        </div>
      )}
    </div>
  </a>
</div>